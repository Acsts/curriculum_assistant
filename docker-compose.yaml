version: "3.9"

services:

  # setup:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #     if [ x${ELASTIC_PASSWORD} == x ]; then
  #       echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #       exit 1;
  #     if [ ! -f config/certs/ca.zip ]; then
  #       echo "Creating CA";
  #       bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #       unzip config/certs/ca.zip -d config/certs;
  #     fi;
  #     if [ ! -f config/certs/certs.zip ]; then
  #       echo "Creating certs";
  #       echo -ne \
  #       "instances:\n"\
  #       "  - name: es01\n"\
  #       "    dns:\n"\
  #       "      - es01\n"\
  #       "      - localhost\n"\
  #       "    ip:\n"\
  #       "      - 127.0.0.1\n"\
  #       > config/certs/instances.yml;
  #       bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #       unzip config/certs/certs.zip -d config/certs;
  #     fi;
  #     echo "Setting file permissions"
  #     chown -R root:root config/certs;
  #     find . -type d -exec chmod 750 \{\} \;;
  #     find . -type f -exec chmod 640 \{\} \;;
  #     echo "Waiting for Elasticsearch availability";
  #     until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #     echo "All done!";
  #     '
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120

  # database:
  #   container_name: database
  #   image: elasticsearch:8.12.2
  #   networks:
  #       - app_network
  #   env_file: .env
  #   volumes:
  #       - db_volume:/usr/share/elasticsearch/data
  #   restart: unless-stopped
  #   expose:
  #       - "9200"

  front:
    container_name: front
    image: front:1.0
    depends_on:
        # - database
        - back
    networks:
        - app_network
    build: front
    env_file: .env
    restart: unless-stopped
    ports:
        - "8501:8501"

  back:
    container_name: back
    image: back:1.0
    networks:
        - app_network
    build: back
    env_file: .env
    restart: unless-stopped
    expose:
        - "80"

volumes:
  db_colume:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: 'volume/data/'
  # certs:
  #  driver: local


networks:
  app_network:
      driver: bridge
